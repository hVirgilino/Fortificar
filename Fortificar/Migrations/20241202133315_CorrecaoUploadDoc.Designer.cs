// <auto-generated />
using System;
using Fortificar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fortificar.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20241202133315_CorrecaoUploadDoc")]
    partial class CorrecaoUploadDoc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fortificar.Areas.Identity.Data.FortificarUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ProponenteId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Tipo")
                        .HasColumnType("tinyint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Fortificar.Models.Anexo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AprovadoAtaEleicao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AprovadoCNPJ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AprovadoCPFRespLegal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AprovadoDadosBancarios")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AprovadoEstatuto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AprovadoRGRespLegal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AtaEleicao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNPJ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPFRespLegal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DadosBancarios")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estatuto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Imagem")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjetoId")
                        .HasColumnType("int");

                    b.Property<string>("RGRespLegal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId")
                        .IsUnique();

                    b.ToTable("Anexo");
                });

            modelBuilder.Entity("Fortificar.Models.CronogramaMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Etapas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjetoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Termino")
                        .HasColumnType("datetime2");

                    b.Property<float?>("ValorEtapa")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("CronogramaMeta");
                });

            modelBuilder.Entity("Fortificar.Models.EquipeExecucaoProjeto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especificacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjetoId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("int");

                    b.Property<string>("Unidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("ValorTotal")
                        .HasColumnType("real");

                    b.Property<float?>("ValorUnitario")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("EquipeExecucaoProjeto");
                });

            modelBuilder.Entity("Fortificar.Models.MembroEquipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CargaHorariaSemanal")
                        .HasColumnType("int");

                    b.Property<string>("Formacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Funcao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjetoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("MembroEquipe");
                });

            modelBuilder.Entity("Fortificar.Models.ODS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjetoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("ODS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Acabar com a pobreza em todas as suas formas, em todos os lugares.",
                            IsSelected = false,
                            Nome = "Erradicação da pobreza"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Acabar com a fome e a inanição, alcançar a segurança alimentar, melhorar a nutrição e promover a agricultura sustentável.",
                            IsSelected = false,
                            Nome = "Erradicação da fome"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Assegurar uma vida saudável e promover o bem-estar para todos, em todas as idades.",
                            IsSelected = false,
                            Nome = "Saúde e Bem-Estar"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Assegurar a educação inclusiva e equitativa de qualidade, e promover oportunidades de aprendizagem ao longo da vida para todos.",
                            IsSelected = false,
                            Nome = "Educação de qualidade"
                        },
                        new
                        {
                            Id = 5,
                            Descricao = "Alcançar a igualdade de gênero e empoderar todas as mulheres e meninas.",
                            IsSelected = false,
                            Nome = "Igualdade de gênero"
                        },
                        new
                        {
                            Id = 6,
                            Descricao = "Assegurar a disponibilidade e a gestão sustentável da água e saneamento para todos.",
                            IsSelected = false,
                            Nome = "Água Potável e Saneamento"
                        },
                        new
                        {
                            Id = 7,
                            Descricao = "Assegurar o acesso confiável, sustentável, moderno e a preço acessível à energia para todos.",
                            IsSelected = false,
                            Nome = "Energia acessível e limpa"
                        },
                        new
                        {
                            Id = 8,
                            Descricao = "Promover o crescimento econômico sustentado, inclusivo e sustentável, o emprego pleno e produtivo e o trabalho decente para todos.",
                            IsSelected = false,
                            Nome = "Trabalho decente e crescimento econômico"
                        },
                        new
                        {
                            Id = 9,
                            Descricao = "Construir infraestruturas resilientes, promover a industrialização inclusiva e sustentável e fomentar a inovação.",
                            IsSelected = false,
                            Nome = "Inovação e infraestrutura"
                        },
                        new
                        {
                            Id = 10,
                            Descricao = "Reduzir a desigualdade dentro dos países e entre eles.",
                            IsSelected = false,
                            Nome = "Redução das desigualdades"
                        },
                        new
                        {
                            Id = 11,
                            Descricao = "Tornar as cidades e os assentamentos humanos inclusivos, seguros, resilientes e sustentáveis.",
                            IsSelected = false,
                            Nome = "Cidades e comunidades sustentáveis"
                        },
                        new
                        {
                            Id = 12,
                            Descricao = "Assegurar padrões de produção e de consumo sustentáveis.",
                            IsSelected = false,
                            Nome = "Consumo e produção responsáveis"
                        },
                        new
                        {
                            Id = 13,
                            Descricao = "Tomar medidas urgentes para combater a mudança do clima e seus impactos.",
                            IsSelected = false,
                            Nome = "Ação contra a Mudança Global do Clima"
                        },
                        new
                        {
                            Id = 14,
                            Descricao = "Conservar e promover o uso sustentável dos oceanos, dos mares e dos recursos marinhos para o desenvolvimento sustentável.",
                            IsSelected = false,
                            Nome = "Vida na Água"
                        },
                        new
                        {
                            Id = 15,
                            Descricao = "Proteger, recuperar e promover o uso sustentável dos ecossistemas terrestres, gerir de forma sustentável as florestas, combater a desertificação, deter e reverter a degradação da terra e deter a perda.",
                            IsSelected = false,
                            Nome = "Vida Terrestre"
                        },
                        new
                        {
                            Id = 16,
                            Descricao = "Promover sociedades pacíficas e inclusivas para o desenvolvimento sustentável, proporcionar o acesso à justiça para todos e construir instituições eficazes, responsáveis e inclusivas em todos os níveis.",
                            IsSelected = false,
                            Nome = "Paz, Justiça e Instituições Eficazes"
                        },
                        new
                        {
                            Id = 17,
                            Descricao = "Fortalecer os meios de implementação e revitalizar a parceria global para o desenvolvimento sustentável.",
                            IsSelected = false,
                            Nome = "Parcerias e Meios de Implementação"
                        });
                });

            modelBuilder.Entity("Fortificar.Models.Parametro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ativo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Tipo")
                        .HasColumnType("int");

                    b.Property<float?>("ValorMax")
                        .HasColumnType("real");

                    b.Property<float?>("ValorMin")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Parametro");
                });

            modelBuilder.Entity("Fortificar.Models.PlanoAplicacaoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especificacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjetoId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("int");

                    b.Property<string>("Unidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("ValorTotal")
                        .HasColumnType("real");

                    b.Property<float?>("ValorUnitario")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("PlanoAplicacaoItem");
                });

            modelBuilder.Entity("Fortificar.Models.Projeto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cronograma")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indicadores")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InicioExecucao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Justificativa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjetivoGeral")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjetivosEspecificos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objeto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Orcamento")
                        .HasColumnType("real");

                    b.Property<int>("ProponenteId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsavelLegalId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsavelTecnicoId")
                        .HasColumnType("int");

                    b.Property<int>("SituacaoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TerminoExecucao")
                        .HasColumnType("datetime2");

                    b.Property<float?>("ValorMeta")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProponenteId");

                    b.HasIndex("ResponsavelLegalId");

                    b.HasIndex("ResponsavelTecnicoId");

                    b.HasIndex("SituacaoId");

                    b.ToTable("Projeto");
                });

            modelBuilder.Entity("Fortificar.Models.ProjetoODS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ODSId")
                        .HasColumnType("int");

                    b.Property<int>("ProjetoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ODSId");

                    b.HasIndex("ProjetoId");

                    b.ToTable("ProjetoODS");
                });

            modelBuilder.Entity("Fortificar.Models.ProjetoPublicoBeneficiario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjetoId")
                        .HasColumnType("int");

                    b.Property<int>("PublicoBeneficiarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.HasIndex("PublicoBeneficiarioId");

                    b.ToTable("ProjetoPublicoBeneficiario");
                });

            modelBuilder.Entity("Fortificar.Models.Proponente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Agencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bairro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNPJ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailEmpresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipeMultidisciplinar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Historico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InformacoesRelevantes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Infraestrutura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InscricaoEstadual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InscricaoMunicipal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrincipaisAcoes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicoAlvo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegioesAtendimento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponsavelLegalId")
                        .HasColumnType("int");

                    b.Property<string>("Site")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoConta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResponsavelLegalId");

                    b.ToTable("Proponente");
                });

            modelBuilder.Entity("Fortificar.Models.PublicoBeneficiario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjetoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("PublicoBeneficiario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsSelected = false,
                            Nome = "Criança"
                        },
                        new
                        {
                            Id = 2,
                            IsSelected = false,
                            Nome = "Adolescente"
                        },
                        new
                        {
                            Id = 3,
                            IsSelected = false,
                            Nome = "Jovens"
                        },
                        new
                        {
                            Id = 4,
                            IsSelected = false,
                            Nome = "Adulto"
                        },
                        new
                        {
                            Id = 5,
                            IsSelected = false,
                            Nome = "Idosos"
                        },
                        new
                        {
                            Id = 6,
                            IsSelected = false,
                            Nome = "Criança e Adolescente"
                        },
                        new
                        {
                            Id = 7,
                            IsSelected = false,
                            Nome = "Criança, Adolescentes, Jovens, Adultos e Idosos"
                        },
                        new
                        {
                            Id = 8,
                            IsSelected = false,
                            Nome = "Adultos e Idosos"
                        },
                        new
                        {
                            Id = 9,
                            IsSelected = false,
                            Nome = "Mulheres"
                        },
                        new
                        {
                            Id = 10,
                            IsSelected = false,
                            Nome = "PCD"
                        },
                        new
                        {
                            Id = 11,
                            IsSelected = false,
                            Nome = "Dependentes de substâncias psicoativas"
                        });
                });

            modelBuilder.Entity("Fortificar.Models.ResponsavelLegal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CargoOSC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MandatoVigente")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgaoExpedidor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResponsavelLegal");
                });

            modelBuilder.Entity("Fortificar.Models.ResponsavelTecnico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CargoOSC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MandatoVigente")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgaoExpedidor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResponsavelTecnico");
                });

            modelBuilder.Entity("Fortificar.Models.Situacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Situacao");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "O projeto ainda está sendo criado pela instituição.",
                            Nome = "Em edição"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "O projeto foi enviado à FORTES.",
                            Nome = "Enviado"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "O projeto foi aprovado e está em andamento.",
                            Nome = "Em andamento"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "O projeto está pendente de algum documento.",
                            Nome = "Aguardando documentação"
                        },
                        new
                        {
                            Id = 5,
                            Descricao = "O projeto foi recusado.",
                            Nome = "Recusado"
                        },
                        new
                        {
                            Id = 6,
                            Descricao = "O projeto foi concluído.",
                            Nome = "Concluido"
                        },
                        new
                        {
                            Id = 7,
                            Descricao = "O projeto está em análise.",
                            Nome = "Em análise"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Fortificar.Models.Anexo", b =>
                {
                    b.HasOne("Fortificar.Models.Projeto", "Projeto")
                        .WithOne("Anexo")
                        .HasForeignKey("Fortificar.Models.Anexo", "ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projeto");
                });

            modelBuilder.Entity("Fortificar.Models.CronogramaMeta", b =>
                {
                    b.HasOne("Fortificar.Models.Projeto", "Projeto")
                        .WithMany("CronogramaMeta")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projeto");
                });

            modelBuilder.Entity("Fortificar.Models.EquipeExecucaoProjeto", b =>
                {
                    b.HasOne("Fortificar.Models.Projeto", "Projeto")
                        .WithMany("EquipeEncarregada")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projeto");
                });

            modelBuilder.Entity("Fortificar.Models.MembroEquipe", b =>
                {
                    b.HasOne("Fortificar.Models.Projeto", "Projeto")
                        .WithMany("EquipeExecucao")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Projeto");
                });

            modelBuilder.Entity("Fortificar.Models.ODS", b =>
                {
                    b.HasOne("Fortificar.Models.Projeto", null)
                        .WithMany("ODS")
                        .HasForeignKey("ProjetoId");
                });

            modelBuilder.Entity("Fortificar.Models.PlanoAplicacaoItem", b =>
                {
                    b.HasOne("Fortificar.Models.Projeto", "Projeto")
                        .WithMany("PlanoAplicacao")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projeto");
                });

            modelBuilder.Entity("Fortificar.Models.Projeto", b =>
                {
                    b.HasOne("Fortificar.Models.Proponente", "Proponente")
                        .WithMany()
                        .HasForeignKey("ProponenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fortificar.Models.ResponsavelLegal", "ResponsavelLegal")
                        .WithMany()
                        .HasForeignKey("ResponsavelLegalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fortificar.Models.ResponsavelTecnico", "ResponsavelTecnico")
                        .WithMany()
                        .HasForeignKey("ResponsavelTecnicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fortificar.Models.Situacao", "Situacao")
                        .WithMany()
                        .HasForeignKey("SituacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proponente");

                    b.Navigation("ResponsavelLegal");

                    b.Navigation("ResponsavelTecnico");

                    b.Navigation("Situacao");
                });

            modelBuilder.Entity("Fortificar.Models.ProjetoODS", b =>
                {
                    b.HasOne("Fortificar.Models.ODS", "ODS")
                        .WithMany()
                        .HasForeignKey("ODSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fortificar.Models.Projeto", "Projeto")
                        .WithMany("ProjetoODS")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ODS");

                    b.Navigation("Projeto");
                });

            modelBuilder.Entity("Fortificar.Models.ProjetoPublicoBeneficiario", b =>
                {
                    b.HasOne("Fortificar.Models.Projeto", "Projeto")
                        .WithMany("ProjetoPublicoBeneficiario")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fortificar.Models.PublicoBeneficiario", "PublicoBeneficiario")
                        .WithMany()
                        .HasForeignKey("PublicoBeneficiarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projeto");

                    b.Navigation("PublicoBeneficiario");
                });

            modelBuilder.Entity("Fortificar.Models.Proponente", b =>
                {
                    b.HasOne("Fortificar.Models.ResponsavelLegal", "ResponsavelLegal")
                        .WithMany()
                        .HasForeignKey("ResponsavelLegalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResponsavelLegal");
                });

            modelBuilder.Entity("Fortificar.Models.PublicoBeneficiario", b =>
                {
                    b.HasOne("Fortificar.Models.Projeto", null)
                        .WithMany("PublicoBeneficiario")
                        .HasForeignKey("ProjetoId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Fortificar.Areas.Identity.Data.FortificarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Fortificar.Areas.Identity.Data.FortificarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fortificar.Areas.Identity.Data.FortificarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Fortificar.Areas.Identity.Data.FortificarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortificar.Models.Projeto", b =>
                {
                    b.Navigation("Anexo");

                    b.Navigation("CronogramaMeta");

                    b.Navigation("EquipeEncarregada");

                    b.Navigation("EquipeExecucao");

                    b.Navigation("ODS");

                    b.Navigation("PlanoAplicacao");

                    b.Navigation("ProjetoODS");

                    b.Navigation("ProjetoPublicoBeneficiario");

                    b.Navigation("PublicoBeneficiario");
                });
#pragma warning restore 612, 618
        }
    }
}
